name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        type: string

jobs:
  # Test release build before publishing
  test-release:
    name: Test Release Build
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build release binaries
        run: |
          # Build with all features for release
          cargo build -p kyrodb-engine --release --locked --all-features
          cargo build -p bench --release --locked

      - name: Test release build
        run: |
          # Quick smoke test of release binaries
          ./target/release/kyrodb-engine --help
          ./target/release/bench --help

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-test-binaries
          path: |
            target/release/kyrodb-engine
            target/release/bench
          retention-days: 1

  # Create GitHub release with binaries
  release-binaries:
    name: Release Binaries
    runs-on: ${{ matrix.os }}
    needs: test-release
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.target }}

      - name: Build kyrodb-engine (${{ matrix.name }})
        run: |
          cargo build -p kyrodb-engine --release --locked --target ${{ matrix.target }}

      - name: Build bench (${{ matrix.name }})
        run: |
          cargo build -p bench --release --locked --target ${{ matrix.target }}

      - name: Package binaries
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf kyrodb-engine-${{ matrix.name }}.tar.gz kyrodb-engine
          tar -czf bench-${{ matrix.name }}.tar.gz bench

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.name }}
          path: |
            target/${{ matrix.target }}/release/kyrodb-engine-${{ matrix.name }}.tar.gz
            target/${{ matrix.target }}/release/bench-${{ matrix.name }}.tar.gz
          retention-days: 30

  # Create the GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test-release, release-binaries]
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get release tag
        id: get_tag
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract version from tag
          VERSION=$(echo ${{ steps.get_tag.outputs.tag }}
          # Generate basic release notes
          cat > release_notes.md << EOF
          ## KyroDB Engine ${VERSION}

          ### Changes
          $(git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)

          ### Binaries
          This release includes pre-built binaries for:
          - Linux x86_64
          - macOS x86_64
          - macOS ARM64

          ### Docker
          Docker images are available at: \`vatskishan03/kyrodb-engine:${VERSION}\`

          ### Installation
          Download the appropriate binary for your platform and make it executable:
          \`\`\`bash
          chmod +x kyrodb-engine
          ./kyrodb-engine --help
          \`\`\`
          EOF

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: KyroDB Engine ${{ steps.get_tag.outputs.tag }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
          files: |
            artifacts/binaries-*/kyrodb-engine-*.tar.gz
            artifacts/binaries-*/bench-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and push Docker images
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: env.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get release tag
        id: get_tag
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        run: |
          echo "tags=vatskishan03/kyrodb-engine:${{ steps.get_tag.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "tags=vatskishan03/kyrodb-engine:latest" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: env.DOCKERHUB_USERNAME != ''
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          labels: |
            org.opencontainers.image.title=KyroDB Engine
            org.opencontainers.image.description=High-performance database engine with learned indexes
            org.opencontainers.image.version=${{ steps.get_tag.outputs.tag }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        if: env.DOCKERHUB_USERNAME != ''
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: vatskishan03/kyrodb-engine:${{ steps.get_tag.outputs.tag }}
          subject-digest: ${{ steps.meta.outputs.digest }}
          push-to-registry: true

  # Post-release verification
  verify-release:
    name: Verify Release
    runs-on: ubuntu-latest
    needs: [create-release, docker-release]
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release tag
        id: get_tag
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Verify GitHub release
        run: |
          # Check that release was created
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_tag.outputs.tag }}"
          if curl -f -s "$RELEASE_URL" > /dev/null; then
            echo "✅ GitHub release created successfully"
          else
            echo "❌ GitHub release not found"
            exit 1
          fi

      - name: Verify Docker image
        if: env.DOCKERHUB_USERNAME != ''
        run: |
          # Check that Docker image exists
          if docker pull vatskishan03/kyrodb-engine:${{ steps.get_tag.outputs.tag }} 2>/dev/null; then
            echo "✅ Docker image available"
          else
            echo "❌ Docker image not found"
            exit 1
          fi
